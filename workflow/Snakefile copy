#set any external variables
configfile: "config.yaml"
# OUTPUT = config["output"]
# ENVS = config["envs_path"]
# ILLUMINACLIP = config["illuminaclip"]
# CONDA_PATH = config["conda_path"]
# ID = config["id"]
# MUSCLE = config["muscle"]
# USEARCH = config["usearch"]

include: "rules/trim_reads.smk"

#trim reads -> annotate ARGs pipeline
rule trim_reads:
    input:
        forward_reads=config["forward"],
        reverse_reads=config["reverse"]
    output:
        forward_paired=f"{OUTPUT}/trimmed/forward_paired.fq.gz",
        forward_unpaired=f"{OUTPUT}/trimmed/forward_unpaired.fq.gz",
        reverse_paired=f"{OUTPUT}/trimmed/reverse_paired.fq.gz",
        reverse_unpaired=f"{OUTPUT}/trimmed/reverse_unpaired.fq.gz"
    shell:
        '''
        source {CONDA_PATH}
        conda activate {ENVS}/trimmomatic
        export JAVA_HOME={ENVS}/trimmomatic/bin/java
        trimmomatic PE -phred33 {input.forward_reads} {input.reverse_reads} {output.forward_paired} {output.forward_unpaired} {output.reverse_paired} {output.reverse_unpaired} ILLUMINACLIP:{ILLUMINACLIP}:2:30:10 LEADING:20 TRAILING:20 SLIDINGWINDOW:4:20 MINLEN:70
        conda deactivate
        '''

rule metaspades:
    input:
        one=f"{OUTPUT}/trimmed/forward_paired.fq.gz",
        two=f"{OUTPUT}/trimmed/reverse_paired.fq.gz",
        s=f"{OUTPUT}/trimmed/forward_unpaired.fq.gz"
    output:
        assembly=f"{OUTPUT}/metaspades/contigs.fasta"
    shell:
        '''
        source {CONDA_PATH}
        conda activate {ENVS}/spades
        metaspades.py -o {OUTPUT}/metaspades -1 {input.one} -2 {input.two} -s {input.s} -m 128 -k 33,55,77,99 -t 16
        conda deactivate
        '''

#need to do rgi_load as well
rule rgi:
    input:
        assembly=f"{OUTPUT}/metaspades/contigs.fasta"
    output:
        args=f"{OUTPUT}/rgi/final.txt"
    shell:
        '''
        source {CONDA_PATH}
        conda activate {ENVS}/rgi
        cd {OUTPUT}/rgi
        rgi main --input_sequence {input.assembly} --output_file final -a DIAMOND --input_type contig --include_loose
        conda deactivate
        '''

#kallisto+shortbred
rule kallisto_index:
    input:
        args=config["all_args"]
    output:
        idx=f"{OUTPUT}/kallisto/args.idx"
    shell:
        '''
        source {CONDA_PATH}
        conda activate {ENVS}/kallisto
        kallisto index -i {output.idx} {input.args}
        conda deactivate
        '''

rule kallisto:
    input:
        idx=f"{OUTPUT}/kallisto/args.idx",
        forward_reads=config["forward"],
        reverse_reads=config["reverse"]
    output:
        abundance=f"{OUTPUT}/kallisto/read_pair_{ID}/abundance.tsv"
    shell:
        '''
        source {CONDA_PATH}
        conda activate {ENVS}/kallisto
        kallisto quant -i {input.idx} -o {OUTPUT}/kallisto/read_pair_{ID} {input.forward_reads} {input.reverse_reads}
        conda deactivate
        '''
#mkdir {OUTPUT}/shortbred_identify/read_pair_{ID}
rule shortbred_identify:
    input:
        proteins=config["faa_file"],
        ref_markers=config["CARD_markers"],
    output:
        markers=f"{OUTPUT}/shortbred/shortbred_identify/read_pair_{ID}/markers.faa"
    shell:
        '''
        source {CONDA_PATH}
        conda activate {ENVS}/shortbred
        shortbred_identify.py --goi {input.proteins} \
        --ref {input.ref_markers} --tmp {OUTPUT}/shortbred/shortbred_identify/read_pair_{ID} \
        --markers {output.markers} --usearch {USEARCH} \
        --muscle {MUSCLE} \
        --cdhit {ENVS}/cdhit/bin/cd-hit \
        --blastp {ENVS}/blast_env/bin/blastp \
        --makeblastdb {ENVS}/blast_env/bin/makeblastdb
        conda deactivate
        '''
#mkdir {OUTPUT}/shortbred_quantify/read_pair_{ID}
rule shortbred_quantify:
    input:
        markers=f"{OUTPUT}/shortbred/shortbred_identify/read_pair_{ID}/markers.faa",
        forward_reads=config["forward"],
        reverse_reads=config["reverse"]
    output:
        abundance=f"{OUTPUT}/shortbred/shortbred_quantify/read_pair_{ID}/results.tsv"
    shell:
        '''
        source {CONDA_PATH}
        conda activate {ENVS}/shortbred
        shortbred_quantify.py --markers {input.markers} --wgs {input.forward_reads} \
        {input.reverse_reads} --results {output.abundance} \
        --tmp {OUTPUT}/shortbred/shortbred_quantify/read_pair_{ID}/tmp_quantify \
        --usearch {USEARCH}
        conda deactivate
        '''